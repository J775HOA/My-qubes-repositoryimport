#!/bin/bash -e

myname=$( basename "$0" )

if [ "$UID" != "0" ] ; then
  @BINDIR@/env | sudo -u root -H -- "$0" "$@"
  exit $?
fi

exec 1> >(logger -s -t "$myname") 2>&1

# Now we securely read the variables from standard input.
# We only accept those variables we care about.
while IFS== read -r v V ; do
  process=
  if [ "$v" == "script_type"        ] ; then process=1 ; fi
  if [ "$v" == "ifconfig_local"     ] ; then process=1 ; fi
  if [ "$v" == "ifconfig_remote"    ] ; then process=1 ; fi
  if [ "$v" == "ifconfig_netmask"   ] ; then process=1 ; fi
  if [ "$v" == "ifconfig_broadcast" ] ; then process=1 ; fi
  if [ "$v" == "route_vpn_gateway"  ] ; then process=1 ; fi
  if [ "$v" == "link_mtu"           ] ; then process=1 ; fi
  if [[ $v  == foreign_option_*    ]] ; then process=1 ; fi

  if [ "$process" == "1" ] ; then
    export "$v"="$V"
  fi
done

initorrestart="$6"
device="$1"

if [ "$script_type" == "up" ] ; then
  @SBINDIR@/qubes-vpn-forwarding blackhole

  # Set up DNS.
  @SBINDIR@/iptables -t nat -F QUBES-VPN
  primary_dns_vpn=
  secondary_dns_vpn=
  dnsstep=primary
  for n in `seq 10000` ; do
    if [ -n "$(eval echo \$foreign_option_$n)" ] ; then
      dns=$(eval echo \$foreign_option_$n | grep DNS | awk ' { print $3 } ')
      if [ -n "$dns" ] ; then
        if [ "$dnsstep" == "primary" ] ; then
          primary_dns=`@BINDIR@/qubesdb-read /qubes-netvm-gateway`
          echo "Forwarding primary DNS $primary_dns to $dns" >&2
          @SBINDIR@/iptables -t nat -A QUBES-VPN -p udp -m udp --dport 53 -d "$primary_dns" -j DNAT --to-destination "$dns"
          @SBINDIR@/iptables -t nat -A QUBES-VPN -p tcp -m tcp --dport 53 -d "$primary_dns" -j DNAT --to-destination "$dns"
          primary_dns_vpn="$dns"
          dnsstep=secondary
        elif [ "$dnsstep" == "secondary" ] ; then
          secondary_dns=`@BINDIR@/qubesdb-read /qubes-netvm-secondary-dns`
          echo "Forwarding secondary DNS $secondary_dns to $dns" >&2
          @SBINDIR@/iptables -t nat -A QUBES-VPN -p udp -m udp --dport 53 -d "$secondary_dns" -j DNAT --to-destination "$dns"
          @SBINDIR@/iptables -t nat -A QUBES-VPN -p tcp -m tcp --dport 53 -d "$secondary_dns" -j DNAT --to-destination "$dns"
          secondary_dns_vpn="$dns"
          dnsstep=nomoarnomoar
        else
          true
        fi
      fi
    else
      break
    fi
  done
  # Catch DNS requests when the remote side did not send us two DNS servers.
  if [ "$dnsstep" == "secondary" -a -n "$dns" ] ; then
    secondary_dns=`@BINDIR@/qubesdb-read /qubes-netvm-secondary-dns`
    echo "Forwarding secondary DNS $secondary_dns to $dns" >&2
    @SBINDIR@/iptables -t nat -A QUBES-VPN -p udp -m udp --dport 53 -d "$secondary_dns" -j DNAT --to-destination "$dns"
    @SBINDIR@/iptables -t nat -A QUBES-VPN -p tcp -m tcp --dport 53 -d "$secondary_dns" -j DNAT --to-destination "$dns"
    secondary_dns_vpn="$dns"
    dnsstep=nomoarnomoar
  fi

  echo "Starting Qubes VPN initialization" >&2
  if [ "$initorrestart" == "init" ] ; then
    if [ -z "$ifconfig_local" ] ; then
      logger -t "$myname" -p error "OpenVPN did not pass us a valid ifconfig_local variable"
      env | sort >&2
    elif [ -z "$ifconfig_netmask" ] ; then
      logger -t "$myname" -p error "OpenVPN did not pass us a valid ifconfig_netmask variable"
      env | sort >&2
    elif [ -z "$ifconfig_broadcast" ] ; then
      logger -t "$myname" -p error "OpenVPN did not pass us a valid ifconfig_broadcast variable"
      env | sort >&2
    elif [ -z "$link_mtu" ] ; then
      logger -t "$myname" -p error "OpenVPN did not pass us a valid link_mtu variable"
      env | sort >&2
    elif [ -z "$route_vpn_gateway" ] ; then
      logger -t "$myname" -p error "OpenVPN did not pass us a valid route_vpn_gateway variable"
      env | sort >&2
    else
      eval $(@BINDIR@/ipcalc -4n "$ifconfig_local" "$ifconfig_netmask") ; ifconfig_network="$NETWORK" ; unset NETWORK
      echo "Setting up device $device with MTU $link_mtu" >&2
      @SBINDIR@/ip link set dev "$device" up mtu "$link_mtu"
      echo "Setting up address $ifconfig_local with netmask $ifconfig_netmask" >&2
      @SBINDIR@/ip addr add dev "$device" "$ifconfig_local"/"$ifconfig_netmask" broadcast "$ifconfig_broadcast"
      echo "Adding default route $route_vpn_gateway and subnet route $ifconfig_network/$ifconfig_netmask in $device to VPN routing table" >&2
      @SBINDIR@/qubes-vpn-forwarding setuprouting "$ifconfig_network"/"$ifconfig_netmask" "$route_vpn_gateway" "$device"
      for n in `seq 10000` ; do
        if [ -n "$(eval echo \$route_network_$n)" ] ; then
          net=$(eval echo \$route_network_$n )
          mask=$(eval echo \$route_netmask_$n )
          gateway=$(eval echo \$route_gateway_$n )
          metric=$(eval echo \$route_metric_$n )
          echo "Server sent us additional routes: $net/$mask gw $gateway metric $metric" >&2
        else
          break
        fi
      done
      msg="Traffic flows through $route_vpn_gateway."
      if [ -n "$primary_dns" ] ; then
        msg="$msg\nDNS requests go to $primary_dns_vpn"
        if [ -n "$secondary_dns" ] ; then
          msg="$msg and $secondary_dns_vpn"
        fi
        msg="$msg."
      fi
      echo "Qubes VPN on $HOSTNAME connected: $msg" >> "@VPNRUNDIR@"/events
    fi
  fi
  echo "Finished Qubes VPN initialization" >&2
elif [ "$script_type" == "down" ] ; then
  echo "Starting Qubes VPN turndown" >&2
  echo "Blackholing the VPN routing table" >&2
  @SBINDIR@/qubes-vpn-forwarding blackhole
  echo "Qubes VPN on $HOSTNAME disconnected: All traffic has been blackholed." >> "@VPNRUNDIR@"/events
  if [ "$initorrestart" == "init" ] ; then
    if [ -z "$ifconfig_local" ] ; then
      logger -t "$myname" -p error "OpenVPN did not pass us a valid ifconfig_local variable"
      env | sort >&2
    elif [ -z "$ifconfig_netmask" ] ; then
      logger -t "$myname" -p error "OpenVPN did not pass us a valid ifconfig_netmask variable"
      env | sort >&2
    else
      @SBINDIR@/ip link show dev "$device" >/dev/null 2>&1 && {
        @SBINDIR@/ip addr del dev "$device" "$ifconfig_local"/"$ifconfig_netmask"
      } || { true ; }
    fi
  fi
  echo "Finished Qubes VPN turndown" >&2
fi
